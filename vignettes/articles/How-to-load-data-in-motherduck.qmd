---
title: "How to load data in motherduck"
---


```{r}
#| label: setup
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| include: true

library(md)
library(tidyverse)
load_all()
```



## Create a database

Later on we will show examples of how to read data from a source file, eg. csv, parquet, excel, or even a different database, directly into duckdb but for now let's assume you want to upload some data that you already have loaded in your R environment.


Before we get into that lets review quickly the three things you need to load data into a database:
-   Database name
    -   This is object that will hold your schemas, tables or views
    -   Somtimes this may be called a catalog
-   Schema name
    -   This fancy name to classify and organize your tables, functions, procedures, etc
-   Table or view name
    -   This is the name of the actual table or view that holds your data
    
To save or reference data, you need to either fully qualify the name with `database_name.schema_name.table_name` or you need to be "in" your database and schema and reference the table name.

If you uploaded data without creating a table or schema first then duckdb will assign "temp" and "main" as the default names for your database and schema respectively.

The quickest and easiest way to get data into duckdb is either use:

-   duckdb::register_duckdb()
-   md::create_or_replace_database()

The different is create_or_replace_database() gives you more control on the database name and schema name.

```{r}
#| label: create-table
#| echo: true
#| eval: true
#| warning: true
#| message: true
#| include: true



temp_con <- DBI::dbConnect(duckdb::duckdb()) #<1>

ggplot2::diamonds |>  #<2>
    create_table(
        .con = temp_con #<3>
        ,database_name = "memory" #<4>
        ,schema_name = "raw" #<5>
        ,table_name = "diamonds" #<6>
        ,write_type="overwrite"  #<7>
        )
```

1. motherduck connection with your token
2. Pass your data into the function
3. List your motherduck connection
4. database name (either new or existing)
5. schema name
6. table name
7. Either overwrite or append the data

Notice that we don't assign this object to anything, this just silently writes our data to our database, to validate the data is in our database, we can do the following:

We can validate if we have successfully saved the table in our database by running `list_tables()`

::: {.callout-note}
## Duckdb vs. Motherduck

If you have a local file or in memory duckdb connection, then you can't create a new database but this function will still work but it will just ignore the database_name you supply it and instead take the name of your current connection.

This is because a your local file / in memory connection is the database -- you can't create or replace a database on top of that. However in motherduck you can create multiple databases.

:::

```{r}
#| label: list-tables-example
#| echo: true
#| eval: false
#| warning: false
#| message: false
#| include: true

list_all_tables(temp_con)
```

After running these functions, we can see our table - ready for us to query it. 

If you want to access your motherduck data, you can simply leverage` dplyr::tbl()` function with your motherduck connection to pull your data and from there leverage the fantastic dbplyr or dplyr package respectively to use tidy verbs to perform additional functions

## organizing our data

Let's say we want to filter and summarize this table and save to our database new name -- no problem, we can repeat the steps and this time we will upload a DBI object instead of tibble.

```{r}
#| eval: false

id_name <- DBI::Id("raw","diamonds") #<1>

diamonds_summary_tbl <- tbl(temp_con,id_name) |>  #<2>
    summarise(
        .by=c(color,cut,clarity)
        ,mean_price=mean(price,na.rm=TRUE)
    )

diamonds_summary_tbl |>
    create_table(   #<3>
    .con = temp_con
    ,database_name = "memory"
    ,schema_name = "raw"
    ,table_name = "diamonds_summary" 
    ,write_type = "overwrite"
)

```
1. x
2. y
3. z


While its the same syntax, create_table will work with an R objct or DBI object to save that table into your database. 

We can validate the tables are correctly loaded with the below function

```{r}
list_all_tables(temp_con)
```

## create new schema

Let's saw we want to organize these existing tables into different schema, we can do this by first creating a new schema and then moving that table or  alternatively loading a table directly with a new schema and table 


```{r}
#| label: new-schema
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| include: true

    create_schema(
        .con=temp_con
        ,database_name = "memory"
        ,schema_name = "curated"
    )
```

This will create a new schema if it doesn't exist but won't load any date.


```{r}
list_schemas(temp_con)
list_all_tables(temp_con)
pwd(temp_con)
```
::: {.callout-note}
## default schemas
Remember as default your duckdb will create a `main` schema even if you don't save any table to it
If you are using duckdb then your database will default to "memory" or the file-path that you selected
:::

We can copy one of tables to our schema with 

```{r}

md::copy_table_to_database(
    .con = temp_con
    ,table_name = "diamonds_summary"
    ,to_database_name = "memory"
    ,to_schema = "curated"
    )
```

There's a complimentary functio called `create_or_repalce_schema` which will also create a schema the different is if there is already a schema with that name it will delete that schema and any tables saved under it.
```{r}

```


```{r}
create_or_replace_schema(.con = temp_con,database_name = "memory",schema_name = "raw")
```

This will delete your old schema and any tables under the schema and replace with a new / empty schema


# lets load data into the new schema 

```{r}
diamonds |> 
    create_table()
```


```{r}

list_all_tables(.con=temp_con)



```

## move tables between schemas and databases

## drop databaes

## how to load data directly into motherduck

-   from csv
-   from excel
-   from parquet
-   from local database
-   from hf
-   from httpfs

## how to 
