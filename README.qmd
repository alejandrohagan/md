---
title: "My Project"
format: gfm
---



![](md_logo.png)

# My Project

This is WIP collection of utilities to help with the management, administration and navigation of duckdb and motherduck databases

This will help you connect to motherduck database, create new databases, install extensions or navigate between your various databases.

Eventually, I'll use the learning here to create a meta DB utilities package so that regardless if you're in snowflake, DuckDB, redshift, etc you will have generalized functions that work across your database types.

I try to leverage linux style commands to minimize mental overhead between switching in and out of other languages.

This is very much work in progress -- I'll eventually transition to the R7 object system but just want to get some usage first before deciding on the architecture and structure 

## Features

-   `connect_to_md()` will leverage your motherduck token to connect you to your motherduck instance (it will install motherduck extension if not created)
-   `pwd()` prints your current database that you are "in"
-   `ls()` lists the databases that you have access to
-   `cd()` will change your database
-   `summarize()` will summarize your database table's data
-   `install_extensions()` will install various duckdb extensions
-   `validate_*()` collection of functions will just validate your connection and extension status
-   `read_httpfs()` helps with reading httpfs formats
-   `read_parquet()` helps with reading parquet files
-   `create_or_replace_database()` will take R data and create a database with your data

## What do I need to use this?

-   You need your own motherduck account and an access token which can be saved to your R environ file with `usethis::edit_r_environ()`

-   Most functions are generalized and can work without local duckDB database

## let's review 

# Connect to mother duck

-   First you will need a motherduck account, which has both free and paid tiers
-   Once you've created an account, simply, go to your settings and click 'Access Tokens' under your 'Integrations'
-   Keep this secure and safe as this lets you connect to your online database to read or write data
-   Open R and use the `usethis::edit_r_environ()` function to put your motherduck token as a variable in your enviornment profile

    -   MOTHERDUCK_TOKEN='tokenID'
-   From there you can use the `connect_to_motherduck("MOTHERDUCK_TOKEN")`
-   This will use the [pool](https://solutions.posit.co/connections/db/r-packages/pool/) library to create a connection to your mother duck instance

```{r}
#| label: connection-example
#| echo: true
#| eval: false
#| warning: false
#| message: false
#| include: true

con <- connect_to_motherduck("MOTHERDUCK_TOKEN")


```

-   these functions validate your connect status to motherduck 

```{r}
#| label: validate-examples
#| echo: true
#| eval: false
#| warning: false
#| message: true
#| include: true



```


# Database adminstrative functions

- list_extensions()
- install_extensions()
- load_extensions
- validate_install_status
- validate_load_status
- show_duckdb_settings()

-   These are a collection of motherduck specific database utilities to help you list, install and load duckdb extensions
-   the full list of extensions is available via duckdb community store are listed [here](https://duckdb.org/docs/stable/core_extensions/overview.html)
-   the `list_extensions()` will list duckdb extension from the community store and list their status, install or loaded
-   you can use `install_extensions()` to install a new exnsion -- this will also automatically load the extension
-   If the extension is already install you can use xx


```{r}
#| label: meta-example1
#| echo: true
#| eval: false
#| warning: false
#| message: false
#| include: true
md::list_extensions(con)


```

```{r}
md::install_extensions(con,"fts")
validate_extension_load_status(con,extension_names = "motherduck")
validate_extension_install_status(con,c("excel","arrow"),return_type = "msg")

```


